import logging
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor
import os
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")


logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect('requests.db')
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    city TEXT NOT NULL,
    brand TEXT NOT NULL,
    size TEXT,
    model TEXT,
    color TEXT,
    created_at TEXT
)
''')
conn.commit()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class RequestForm(StatesGroup):
    city = State()
    brand = State()
    size = State()
    model = State()
    color = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.add(KeyboardButton("üöÄ –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞"))

cities = [
    "–ê–±–∞–∫–∞–Ω", "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫", "–ë—Ä—è–Ω—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ì–µ–ª–µ–Ω–¥–∂–∏–∫", "–ò—Ä–∫—É—Ç—Å–∫", "–ò–∂–µ–≤—Å–∫",
    "–ö–∞–ª—É–≥–∞", "–ö–∞–∑–∞–Ω—å", "–ö–∏—Ä–æ–≤", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–õ–∏–ø–µ—Ü–∫", "–ú–æ—Å–∫–≤–∞",
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫", "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–û–±–Ω–∏–Ω—Å–∫", "–û–º—Å–∫",
    "–ü–µ—Ä–º—å", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–°–∞—Ä–∞—Ç–æ–≤", "–°–æ—á–∏", "–°—É—Ä–≥—É—Ç",
    "–°—ã–∫—Ç—ã–≤–∫–∞—Ä", "–¢—É–ª–∞", "–¢—é–º–µ–Ω—å", "–í–ª–∞–¥–∏–º–∏—Ä", "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "–í–æ—Ä–æ–Ω–µ–∂", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å",
    "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫"
]

city_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
city_keyboard.add(*[KeyboardButton(city) for city in cities])

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=start_keyboard)

@dp.message_handler(Text(equals="üöÄ –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞"), state="*")
async def start_survey(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=city_keyboard)
    await RequestForm.city.set()

@dp.message_handler(state=RequestForm.city)
async def process_city(message: types.Message, state: FSMContext):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω –≥–æ—Ä–æ–¥: {message.text}")
    if message.text not in cities:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(city=message.text)
    await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –±—Ä–µ–Ω–¥:", reply_markup=ReplyKeyboardRemove())
    await RequestForm.brand.set()

@dp.message_handler(state=RequestForm.brand)
async def process_brand(message: types.Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.reply("–í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await RequestForm.size.set()

@dp.message_handler(state=RequestForm.size)
async def process_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text)
    await message.reply("–í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await RequestForm.model.set()

@dp.message_handler(state=RequestForm.model)
async def process_model(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.reply("–í–≤–µ–¥–∏ —Ü–≤–µ—Ç (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await RequestForm.color.set()

@dp.message_handler(state=RequestForm.color)
async def process_color(message: types.Message, state: FSMContext):
    await state.update_data(color=message.text)
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    cursor.execute('''
        INSERT INTO requests (user_id, city, brand, size, model, color, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (
        message.from_user.id,
        data['city'],
        data['brand'],
        data.get('size'),
        data.get('model'),
        data.get('color'),
        datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ))
    conn.commit()

    await message.reply("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –µ—â—ë –æ–¥–Ω—É ‚Äî —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ üöÄ –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞.", reply_markup=start_keyboard)
    await state.finish()

# --- –§–∏–ª—å—Ç—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –Ω–∞—á–∞–ª–∞ ---
@dp.message_handler(state="*")
async def block_unexpected(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if not current_state:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üöÄ –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞.", reply_markup=start_keyboard)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)
