import logging
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor
import os
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("MAIN_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect('requests.db')
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    city TEXT NOT NULL,
    shop TEXT,
    category TEXT NOT NULL,
    brand TEXT NOT NULL,
    is_custom BOOLEAN DEFAULT 0,  
    size TEXT,
    model TEXT,
    color TEXT,
    created_at TEXT
)
''')
conn.commit()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class RequestForm(StatesGroup):
    city = State()
    shop = State()
    category = State()
    brand = State()
    custom_brand = State()
    model = State()
    size = State()
    color = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.add(KeyboardButton("üöÄ –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞"))

cities = {
    "–ê–±–∞–∫–∞–Ω", "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫", "–ë—Ä—è–Ω—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ì–µ–ª–µ–Ω–¥–∂–∏–∫", "–ò—Ä–∫—É—Ç—Å–∫", "–ò–∂–µ–≤—Å–∫",
    "–ö–∞–ª—É–≥–∞", "–ö–∞–∑–∞–Ω—å", "–ö–∏—Ä–æ–≤", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–õ–∏–ø–µ—Ü–∫", 
    "–ú–æ—Å–∫–≤–∞ –∏ –æ–±–ª–∞—Å—Ç—å", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥ –∏ –æ–±–ª–∞—Å—Ç—å", "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫", "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–û–±–Ω–∏–Ω—Å–∫", "–û–º—Å–∫",
    "–ü–µ—Ä–º—å", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –æ–±–ª–∞—Å—Ç—å", "–°–∞—Ä–∞—Ç–æ–≤", "–°–æ—á–∏", "–°—É—Ä–≥—É—Ç",
    "–°—ã–∫—Ç—ã–≤–∫–∞—Ä", "–¢—É–ª–∞", "–¢—é–º–µ–Ω—å", "–í–ª–∞–¥–∏–º–∏—Ä", "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "–í–æ—Ä–æ–Ω–µ–∂", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å",
    "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫"
}

city_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
city_keyboard.add(*[KeyboardButton(city) for city in sorted(cities)])

city_shops = {
    "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫":["–ú–∞–∫—Å–∏", "–¢–∏—Ç–∞–Ω –ê—Ä–µ–Ω–∞"],
"–ú–æ—Å–∫–≤–∞ –∏ –æ–±–ª–∞—Å—Ç—å": [
    "–ê–≤–∏–∞–ø–∞—Ä–∫",
    "–ê–∫–≤–∞—Ä–µ–ª—å",
    "–ê—Ç—Ä–∏—É–º",
    "–ê—Ñ–∏–º–æ–ª–ª",
    "–ë–µ–ª–∞—è –¥–∞—á–∞",
    "–ë–µ–ª–∞—è –¥–∞—á–∞ Urban",
    "–ï–≤—Ä–æ–ø–æ–ª–∏—Å",
    "Fashion House",
    "–ò–∑–º–∞–π–ª–æ–≤—Å–∫–∏–π –ü–∞—Å—Å–∞–∂",
    "–ö–∞—à–∏—Ä—Å–∫–∞—è –ü–ª–∞–∑–∞",
    "–ö–æ–ª—É–º–±—É—Å",
    "–ö—Ä–∞—Å–Ω–∞—è –ü—Ä–µ—Å–Ω—è",
    "–ö—Ä–∞—Å–Ω—ã–π –ö–∏—Ç",
    "–ö—É–∑–Ω–µ—Ü–∫–∏–π –º–æ—Å—Ç",
    "–ú–µ—Ç—Ä–æ–ø–æ–ª–∏—Å",
    "–ù–æ–≤–∞—è –†–∏–≥–∞",
    "–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ",
    "–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥",
    "–ü–∞–≤–µ–ª–µ—Ü–∫–∞—è –ü–ª–∞–∑–∞",
    "–†–ò–û",
    "–°–∞–ª–∞—Ä–∏—Å",
    "–°–∞–≤–µ–ª–æ–≤—Å–∫–∏–π",
    "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏",
    "Vegas –ö–∞—à–∏—Ä—Å–∫–æ–µ",
    "Vegas –ö—É–Ω—Ü–µ–≤–æ",
    "Vegas –°–∏—Ç–∏",
    "XL"
],
    "–°—É—Ä–≥—É—Ç": [
        "–ê—É—Ä–∞",
        "–†–æ—Å–∏—á"
    ],
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –æ–±–ª–∞—Å—Ç—å": [
           "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π",
    "Fashion House",
    "–ì–∞–ª–µ—Ä–µ—è",
    "–õ–µ—Ç–æ",
    "–û—Ö—Ç–∞ –ú–æ–ª–ª",
    "–†—É–º–±–∞",
    "–Æ–∂–Ω—ã–π –ü–æ–ª—é—Å"
    ],
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": [
        "–ì—Ä–∏–Ω–≤–∏—á", "–û–º–µ–≥–∞","Brands Stories outlet"
    ],
    "–ò—Ä–∫—É—Ç—Å–∫":["–ú–æ–¥–Ω—ã–π –ö–≤–∞—Ä—Ç–∞–ª", "–Æ–±–∏–ª–µ–π–Ω—ã–π"],
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": [
        "–ì–∞–ª–µ—Ä–µ—è –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–û–ó –ú–æ–ª–ª", "–ú–µ—Ä–∏–¥–∏–∞–Ω",
    ],
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥ –∏ –æ–±–ª–∞—Å—Ç—å":["–ù–µ–±–æ","–ú–µ–≥–∞"],
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫":["–ê—É—Ä–∞", "–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç"]
    
}


shop_keyboards = {
    city: ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(*[KeyboardButton(shop) for shop in sorted(shops)])
    for city, shops in city_shops.items()
}

categories = ["–æ–¥–µ–∂–¥–∞", "–æ–±—É–≤—å", "–∞–∫—Å—É—Å—Å—É–∞—Ä—ã", "–¥—Ä—É–≥–∞—è"]

category_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
category_keyboard.add(*[KeyboardButton(category) for category in categories])


colors = [
    "—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π", "—Å–µ—Ä—ã–π", "–±–µ–∂–µ–≤—ã–π", "–∂–µ–ª—Ç—ã–π",
    "–∑–µ–ª–µ–Ω—ã–π", "–≥–æ–ª—É–±–æ–π", "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π", "–∫—Ä–∞—Å–Ω—ã–π",
    "–º—É–ª—å—Ç–∏–∫–æ–ª–æ—Ä", "–æ—Ä–∞–Ω–∂–µ–≤—ã–π", "–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π", "—Ä–æ–∑–æ–≤—ã–π",
    "—Å–∏–Ω–∏–π", "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–¥—Ä—É–≥–æ–π"
]

color_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
color_keyboard.add(*[KeyboardButton(color) for color in colors])

brands = [
    "adidas",
    "adidas Originals",
     "Nike",
     "PUMA",
    "Reebok",
     "Under Armour",
    "New Balance",
      "Peak",
     "Hike",
    "adidas YEEZY",
    "Alo Yoga",
    "Alpha Industries",
    "ASICS",
    "Bona Fide",
    "Boss",
    "Buff",
    "Calvin Klein Performance",
    "Calvin Klein Underwear",
    "Carhartt WIP",
    "Champion",
    "Colmar",
    "Cream Yoga",
    "Deha",
    "Diesel",
    "EA7",
    "Ecco",
    "Etudes",
    "Euphoria",
    "Golden Goose",
    "Gri",
    "GTS",
    "Haikure",
    "Heroine Sport",
    "Hike",
    "Hoka One One",
    "Hugo",
    "Icepeak",
    "Jogel",
    "Jordan",
    "Kerry",
    "Krakatau",
    "Lacoste",
    "Lassie",
    "Li-Ning",
    "LumberJack",
    "Luhta",
    "Mademan",
    "Mark Formelle",
    "Mela",
    "Mizuno",
    "Nativos",
    "New Balance",
    "Nike",
    "Nike ACG",
    "Nux",
    "Obey",
    "Oakley",
    "On",
    "Peak",
    "Premiata",
    "PUMA",
    "Reebok",
    "Reima",
    "Salomon",
    "Saucony",
    "Skandiwear",
    "Solemate",
    "Speedo",
    "Sporty & Rich",
    "Stone Island",
    "The North Face",
    "The Ragged Priest",
    "TheJoggConcept",
    "Ternua",
    "Tyr",
    "UGG",
    "Uglow",
    "Under Armour",
    "Vans",
    "Veja",
    "Viking",
    "Vtr",
    "Wilson",
    "Xtep",
    "ZNY"
]

main_brands = [
    "adidas", "adidas Originals", "Nike",  "Reebok",  "PUMA",  "Under Armour",  "New Balance", "Peak", "Hike", "Mademan", 
      "Champion", "On", "Sporty & Rich", "Cream Yoga", "Lacoste"
     
]
other_brands = [b for b in brands if b not in main_brands]

main_brands_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
for brand in main_brands:
    main_brands_keyboard.insert(KeyboardButton(brand))
main_brands_keyboard.add(KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –±—Ä–µ–Ω–¥"))



# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=start_keyboard)

@dp.message_handler(Text(equals="üöÄ –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞"), state="*")
async def start_survey(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=city_keyboard)
    await RequestForm.city.set()


@dp.message_handler(state=RequestForm.city)
async def process_city(message: types.Message, state: FSMContext):
    if message.text not in cities:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return
    
    await state.update_data(city=message.text)
    
    if message.text in city_shops:
        await message.answer(f"–í—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω –≤ {message.text}:", 
                           reply_markup=shop_keyboards[message.text])
        await RequestForm.shop.set()
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_brands_keyboard)
        await RequestForm.category.set()

@dp.message_handler(state=RequestForm.shop)
async def process_shop(message: types.Message, state: FSMContext):
    data = await state.get_data()
    city = data['city']
    
    if city not in city_shops or message.text not in city_shops[city]:
        await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è {city}.", 
                          reply_markup=shop_keyboards[city])
        return
    
    await state.update_data(shop=message.text)
    await message.answer(f"–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_brands_keyboard)
    await RequestForm.category.set()
    
@dp.message_handler(state=RequestForm.category)
async def process_category(message: types.Message, state: FSMContext):
    if message.text not in categories:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return
        await message.answer("–í—ã–±–µ—Ä–∏ –±—Ä–µ–Ω–¥:", reply_markup=main_brands_keyboard)
        await RequestForm.brand.set()

@dp.message_handler(state=RequestForm.brand)
async def process_brand(message: types.Message, state: FSMContext):
    if message.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –±—Ä–µ–Ω–¥":
        await message.answer("–í—ã–±–µ—Ä–∏ –±—Ä–µ–Ω–¥:", reply_markup=ReplyKeyboardRemove())
        await RequestForm.custom_brand.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
        return
    
    if message.text in main_brands:
        await state.update_data(brand=message.text, is_custom=0)
        await message.answer(f"–í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å", reply_markup=ReplyKeyboardRemove())
        await RequestForm.model.set() 
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –±—Ä–µ–Ω–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ '–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –±—Ä–µ–Ω–¥'", 
                          reply_markup=brands_keyboard)

@dp.message_handler(state=RequestForm.custom_brand)
async def process_custom_brand(message: types.Message, state: FSMContext):
    custom_brand = message.text.strip()
    
    if len(custom_brand) < 2:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(brand=custom_brand, is_custom=1)
    await message.answer(f"–í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å:", reply_markup=ReplyKeyboardRemove())
    await RequestForm.model.set()

@dp.message_handler(state=RequestForm.model)
async def process_model(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.reply("–í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä:")
    await RequestForm.size.set()

@dp.message_handler(state=RequestForm.size)
async def process_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text)
    await message.reply("–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç:", reply_markup=color_keyboard)
    await RequestForm.color.set()

@dp.message_handler(state=RequestForm.color)
async def process_color(message: types.Message, state: FSMContext):
    if message.text not in colors:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return
    
    await state.update_data(color=message.text)
    data = await state.get_data()

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    cursor.execute('''
       INSERT INTO requests 
    (user_id, city, shop, brand, is_custom, size, model, color, created_at)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        message.from_user.id,
        data['city'],
        data.get('shop'),
        data.get('category'),
        data['brand'],
        data.get('is_custom', 0),
        data.get('size'),
        data.get('model'),
        data.get('color'),
        datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ))
    conn.commit()
    
    await message.answer("–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –µ—â—ë –æ–¥–Ω—É ‚Äî —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ üöÄ –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞.", reply_markup=start_keyboard)
    await state.finish()

# --- –§–∏–ª—å—Ç—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –Ω–∞—á–∞–ª–∞ ---
@dp.message_handler(state="*")
async def block_unexpected(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if not current_state:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üöÄ –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞.", reply_markup=start_keyboard)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)
