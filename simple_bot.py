# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=start_keyboard)

@dp.message_handler(Text(equals="üöÄ –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞"), state="*")
async def start_survey(message: types.Message, state: FSMContext):
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ
    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=city_keyboard)
    await RequestForm.city.set()

@dp.message_handler(state=RequestForm.city)
async def process_city(message: types.Message, state: FSMContext):
    if message.text not in cities:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.", reply_markup=city_keyboard)
        return
    
    await state.update_data(city=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –±—Ä–µ–Ω–¥:", reply_markup=ReplyKeyboardRemove())
    await RequestForm.brand.set()

@dp.message_handler(state=RequestForm.brand)
async def process_brand(message: types.Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.answer("–í–≤–µ–¥–∏ —Ä–∞–∑–º–µ—Ä:")
    await RequestForm.size.set()

@dp.message_handler(state=RequestForm.size)
async def process_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text)
    await message.answer("–í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å:")
    await RequestForm.model.set()

@dp.message_handler(state=RequestForm.model)
async def process_model(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=color_keyboard)
    await RequestForm.color.set()

@dp.message_handler(state=RequestForm.color)
async def process_color(message: types.Message, state: FSMContext):
    if message.text.lower() not in COLORS:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.", reply_markup=color_keyboard)
        return
    
    await state.update_data(color=message.text.lower())
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    cursor.execute('''
        INSERT INTO requests (user_id, city, brand, size, model, color, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (
        message.from_user.id,
        data['city'],
        data['brand'],
        data.get('size'),
        data.get('model'),
        data.get('color'),
        datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ))
    conn.commit()

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä - —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ üöÄ –ù–µ—Ç —Ç–æ–≤–∞—Ä–∞.", 
        reply_markup=start_keyboard
    )
    await state.finish()

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
